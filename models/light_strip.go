package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LightStrip light strip
// swagger:model LightStrip
type LightStrip struct {

	// Name of the light strip
	// Required: true
	Name *string `json:"name"`

	// pixels
	// Required: true
	Pixels []*Color `json:"pixels"`
}

// Validate validates this light strip
func (m *LightStrip) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePixels(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LightStrip) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *LightStrip) validatePixels(formats strfmt.Registry) error {

	if err := validate.Required("pixels", "body", m.Pixels); err != nil {
		return err
	}

	for i := 0; i < len(m.Pixels); i++ {

		if swag.IsZero(m.Pixels[i]) { // not required
			continue
		}

		if m.Pixels[i] != nil {

			if err := m.Pixels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pixels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
