package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TemperatureReading temperature reading
// swagger:model TemperatureReading
type TemperatureReading struct {

	// analog
	// Required: true
	// Maximum: 1023
	// Minimum: 0
	Analog *int32 `json:"analog"`

	// Temperature reading in degrees Celsius
	// Required: true
	Celsius *float32 `json:"celsius"`

	// The date and time of the reading
	// Required: true
	DateTime *strfmt.DateTime `json:"date-time"`

	// Temperature reading in degrees Fahrenheit
	// Required: true
	Fahrenheit *float32 `json:"fahrenheit"`

	// Temperature reading in degrees Kelvin
	// Required: true
	Kelvin *float32 `json:"kelvin"`

	// probe
	// Required: true
	// Maximum: 7
	// Minimum: 0
	Probe *int32 `json:"probe"`

	// resistance
	// Maximum: 1e+06
	// Minimum: 0
	Resistance *int32 `json:"resistance,omitempty"`

	// voltage
	// Required: true
	// Maximum: 3.3
	// Minimum: 0
	Voltage *float32 `json:"voltage"`

	// warning
	Warning string `json:"warning,omitempty"`
}

// Validate validates this temperature reading
func (m *TemperatureReading) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalog(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCelsius(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFahrenheit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKelvin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProbe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResistance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVoltage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemperatureReading) validateAnalog(formats strfmt.Registry) error {

	if err := validate.Required("analog", "body", m.Analog); err != nil {
		return err
	}

	if err := validate.MinimumInt("analog", "body", int64(*m.Analog), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("analog", "body", int64(*m.Analog), 1023, false); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureReading) validateCelsius(formats strfmt.Registry) error {

	if err := validate.Required("celsius", "body", m.Celsius); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureReading) validateDateTime(formats strfmt.Registry) error {

	if err := validate.Required("date-time", "body", m.DateTime); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureReading) validateFahrenheit(formats strfmt.Registry) error {

	if err := validate.Required("fahrenheit", "body", m.Fahrenheit); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureReading) validateKelvin(formats strfmt.Registry) error {

	if err := validate.Required("kelvin", "body", m.Kelvin); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureReading) validateProbe(formats strfmt.Registry) error {

	if err := validate.Required("probe", "body", m.Probe); err != nil {
		return err
	}

	if err := validate.MinimumInt("probe", "body", int64(*m.Probe), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("probe", "body", int64(*m.Probe), 7, false); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureReading) validateResistance(formats strfmt.Registry) error {

	if swag.IsZero(m.Resistance) { // not required
		return nil
	}

	if err := validate.MinimumInt("resistance", "body", int64(*m.Resistance), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("resistance", "body", int64(*m.Resistance), 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureReading) validateVoltage(formats strfmt.Registry) error {

	if err := validate.Required("voltage", "body", m.Voltage); err != nil {
		return err
	}

	if err := validate.Minimum("voltage", "body", float64(*m.Voltage), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("voltage", "body", float64(*m.Voltage), 3.3, false); err != nil {
		return err
	}

	return nil
}
