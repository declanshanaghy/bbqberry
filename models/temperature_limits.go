package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TemperatureLimits temperature limits
// swagger:model TemperatureLimits
type TemperatureLimits struct {

	// max abs celsius
	// Required: true
	MaxAbsCelsius *int32 `json:"maxAbsCelsius"`

	// max warn celsius
	// Required: true
	MaxWarnCelsius *int32 `json:"maxWarnCelsius"`

	// min abs celsius
	// Required: true
	MinAbsCelsius *int32 `json:"minAbsCelsius"`

	// min warn celsius
	// Required: true
	MinWarnCelsius *int32 `json:"minWarnCelsius"`

	// Ambient probes measure air temperature. Cooking probes measure food temperature
	// Required: true
	ProbeType *string `json:"probeType"`
}

// Validate validates this temperature limits
func (m *TemperatureLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxAbsCelsius(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxWarnCelsius(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMinAbsCelsius(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMinWarnCelsius(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProbeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemperatureLimits) validateMaxAbsCelsius(formats strfmt.Registry) error {

	if err := validate.Required("maxAbsCelsius", "body", m.MaxAbsCelsius); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureLimits) validateMaxWarnCelsius(formats strfmt.Registry) error {

	if err := validate.Required("maxWarnCelsius", "body", m.MaxWarnCelsius); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureLimits) validateMinAbsCelsius(formats strfmt.Registry) error {

	if err := validate.Required("minAbsCelsius", "body", m.MinAbsCelsius); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureLimits) validateMinWarnCelsius(formats strfmt.Registry) error {

	if err := validate.Required("minWarnCelsius", "body", m.MinWarnCelsius); err != nil {
		return err
	}

	return nil
}

func (m *TemperatureLimits) validateProbeType(formats strfmt.Registry) error {

	if err := validate.Required("probeType", "body", m.ProbeType); err != nil {
		return err
	}

	return nil
}
