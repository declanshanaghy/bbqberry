swagger: "2.0"
info:
  description: "Rest API definition for BBQ Berry"
  version: "v1"
  title: "BBQ Berry"
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /sensors/temperature/{probe}:
    get:
      operationId: getTemperature
      tags:
        - Temperature
      summary: "Get the current temperature reading from the given probe"
      parameters:
        - name: probe
          in: path
          description: The termerature probe number to query
          required: true
          type: integer
          format: int32
          minimum: 0
          maximum: 7
          default: 0
      responses:
        200:
          description: "Temperature was read successfully"
          schema:
            $ref: "#/definitions/Temperature"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /hello:
    get:
      operationId: hello
      tags:
        - Example
      summary: "Example versioned hello world endpoint"
      responses:
        200:
          description: "Sample hello world endpoint"
          schema:
            $ref: "#/definitions/Hello"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /health:
    get:
      operationId: health
      tags:
        - Health
      summary: "UNVERSIONED Health check endpoint. Required for all services"
      description: |
        Performs detailed internal checks and reports back whether or not the service is operating properly
        https://confluence.splunk.com/display/PROD/Common+Microservice+Endpoints+and+Version+Management
      responses:
        200:
          description: "Service is operating normally"
          schema:
            $ref: "#/definitions/Health"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

definitions:
  Temperature:
    type: object
    required:
      - kelvin
      - celcuis
      - fahrenheit
      - probe
      - time
    properties:
      kelvin:
        type: number
        format: float
        description: Temperature reading in degrees kelvin
      celcuis:
        type: number
        format: float
        description: Temperature reading in degrees celcuis
      fahrenheit:
        type: number
        format: float
        description: Temperature reading in degrees fahrenheit
      probe:
        type: integer
        format: int32
        description: The probe number the temperature came from
      time:
        type: time
        format: date-time
        description: The date and time of the reading
  Hello:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        description: An example message
  Error:
    type: object
    required:
      - code
    properties:
      code:
        type: integer
        format: int32
        description: |
          Internal error code. In generic error cases this may be a HTTP status code.
          Therefore internal error codes should not conflict with HTTP status codes.
      message:
        type: string
        description: A brief description of the error
      fields:
        type: string
        description: Optional list of field names which caused the error
  ServiceInfo:
    type: object
    required:
      - name
      - version
    properties:
      name:
        type: string
        description: Service name
      version:
        type: string
        description: Service API version
      error:
  Health:
    type: object
    required:
      - healthy
      - message
      - service_info
    properties:
      healthy:
        type: boolean
        description: Flag indicating whether or not ALL internal checks passed
      error:
        type: object
        $ref: "#/definitions/Error"
      service_info:
        $ref: "#/definitions/ServiceInfo"
