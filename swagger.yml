swagger: "2.0"
info:
  description: "Rest API definition for BBQ Berry"
  version: "v1"
  title: "BBQ Berry"
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /monitors:
    post:
      operationId: createMonitor
      tags:
        - Monitors
      summary: "Get monitor settings for the requested probe"
      parameters:
        - name: probe
          in: query
          description: The termerature probe to monitor
          required: true
          type: integer
          format: int32
          minimum: 0
          maximum: 7
      responses:
        200:
          description: "The currently configured monitor(s) were retrieved successfully"
          schema:
            $ref: "#/definitions/TemperatureMonitors"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    get:
      operationId: getMonitors
      tags:
        - Monitors
      summary: "Get monitors for the requested probe"
      parameters:
        - name: probe
          in: query
          description: The probe for which to retrieve active monitors (or all probes if omitted)
          required: false
          type: integer
          format: int32
          minimum: 0
          maximum: 7
      responses:
        200:
          description: "The currently configured monitor(s) were retrieved successfully"
          schema:
            $ref: "#/definitions/TemperatureMonitors"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /temperatures:
    get:
      operationId: getTemperatures
      tags:
        - Temperatures
      summary: "Get the current temperature reading from the requested probe(s)"
      parameters:
        - name: probe
          in: query
          description: The termerature probe to read from (or all probes if omitted)
          required: false
          type: integer
          format: int32
          minimum: 0
          maximum: 7
      responses:
        200:
          description: "Temperature was read successfully"
          schema:
            $ref: "#/definitions/TemperatureReadings"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /hardware:
    get:
      operationId: getHardware
      tags:
        - Hardware
      summary: "Get current configuration settings"
      responses:
        200:
          description: "The config was retrieved successfully"
          schema:
            $ref: "#/definitions/HardwareConfig"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /health:
    get:
      operationId: health
      tags:
        - Health
      summary: "UNVERSIONED Health check endpoint. Required for all services"
      description: |
        Performs detailed internal checks and reports back whether or not the service is operating properly
        https://confluence.splunk.com/display/PROD/Common+Microservice+Endpoints+and+Version+Management
      responses:
        200:
          description: "Service is operating normally"
          schema:
            $ref: "#/definitions/Health"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

definitions:
  TemperatureLimits:
    type: object
    required:
      - probeType
      - minWarnCelsius
      - maxWarnCelsius
      - minAbsCelsius
      - maxAbsCelsius
    properties:
      probeType:
        type: string
        description: Ambient probes measure air temperature. Cooking probes measure food temperature
      minWarnCelsius:
        type: integer
        format: int32
      maxWarnCelsius:
        type: integer
        format: int32
      minAbsCelsius:
        type: integer
        format: int32
      maxAbsCelsius:
        type: integer
        format: int32
  TemperatureSetting:
    type: object
    required:
      - label
      - tempLimits
    properties:
      label:
        type: string
      tempLimits:
        type: object
        $ref: "#/definitions/TemperatureLimits"
  TemperatureSettings:
    type: array
    items:
      $ref: "#/definitions/TemperatureSetting"
  HardwareConfig:
    type: object
    required:
      - numLedPixels
      - vcc
      - analogMax
      - probes
    properties:
      numLedPixels:
        type: integer
        format: int32
        minimum: 0
        default: 0
      vcc:
        type: number
        format: float
        default: 3.3
      analogMax:
        type: integer
        format: int32
        minimum: 0
        default: 1024
      analogVoltsPerUnit:
        description: "The amount the voltage will increase to reflect a unit increase in analog reading"
        type: number
        format: float
        minimum: 0.0
        default: 1000.0
      probes:
        type: object
        $ref: "#/definitions/TemperatureSettings"
  TemperatureMonitors:
    type: array
    items:
      $ref: "#/definitions/TemperatureMonitor"
  TemperatureMonitor:
    type: object
    required:
      - id
      - probe
      - scale
      - min
      - max
    properties:
      id:
        type: string
        description: Unique ID for this temperature monitor
      probe:
        type: integer
        format: int32
        minimum: 0
        maximum: 7
        default: 0
      scale:
        type: string
        description: The temperature scale
      min:
        type: number
        format: float
        description: The minimum temperature, below which an alert will be generated
      max:
        type: number
        format: float
        description: The maximium temperature, below which an alert will be generated
  TemperatureReadings:
    type: array
    items:
      $ref: "#/definitions/TemperatureReading"
  TemperatureReading:
    type: object
    required:
      - analog
      - voltage
      - kelvin
      - celsius
      - fahrenheit
      - probe
      - date-time
    properties:
      kelvin:
        type: number
        format: integer
        format: int32
        description: Temperature reading in degrees Kelvin
      celsius:
        type: number
        format: integer
        format: int32
        description: Temperature reading in degrees Celsius
      fahrenheit:
        type: number
        format: integer
        format: int32
        description: Temperature reading in degrees Fahrenheit
      date-time:
        type: string
        format: date-time
        description: The date and time of the reading
      analog:
        type: integer
        format: int32
        minimum: 0
        maximum: 1023
      voltage:
        type: number
        format: float
        minimum: 0
        maximum: 3.3
      warning:
        type: string
      probe:
        type: integer
        format: int32
        minimum: 0
        maximum: 7
        default: 0
  Error:
    type: object
    required:
      - code
    properties:
      code:
        type: integer
        format: int32
        description: |
          Internal error code. In generic error cases this may be a HTTP status code.
          Therefore internal error codes should not conflict with HTTP status codes.
      message:
        type: string
        description: A brief description of the error
      fields:
        type: string
        description: Optional list of field names which caused the error
  ServiceInfo:
    type: object
    required:
      - name
      - version
    properties:
      name:
        type: string
        description: Service name
      version:
        type: string
        description: Service API version
  Health:
    type: object
    required:
      - healthy
      - service_info
    properties:
      healthy:
        type: boolean
        description: Flag indicating whether or not ALL internal checks passed
      error:
        $ref: "#/definitions/Error"
      service_info:
        $ref: "#/definitions/ServiceInfo"
