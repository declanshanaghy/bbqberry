package temperature

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/declanshanaghy/bbqberry/models"
)

// GetTemperatureReader is a Reader for the GetTemperature structure.
type GetTemperatureReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTemperatureReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTemperatureOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetTemperatureDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTemperatureOK creates a GetTemperatureOK with default headers values
func NewGetTemperatureOK() *GetTemperatureOK {
	return &GetTemperatureOK{}
}

/*GetTemperatureOK handles this case with default header values.

Temperature was read successfully
*/
type GetTemperatureOK struct {
	Payload *models.Temperature
}

func (o *GetTemperatureOK) Error() string {
	return fmt.Sprintf("[GET /sensors/temperature/{probe}][%d] getTemperatureOK  %+v", 200, o.Payload)
}

func (o *GetTemperatureOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Temperature)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTemperatureDefault creates a GetTemperatureDefault with default headers values
func NewGetTemperatureDefault(code int) *GetTemperatureDefault {
	return &GetTemperatureDefault{
		_statusCode: code,
	}
}

/*GetTemperatureDefault handles this case with default header values.

Unexpected error
*/
type GetTemperatureDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get temperature default response
func (o *GetTemperatureDefault) Code() int {
	return o._statusCode
}

func (o *GetTemperatureDefault) Error() string {
	return fmt.Sprintf("[GET /sensors/temperature/{probe}][%d] getTemperature default  %+v", o._statusCode, o.Payload)
}

func (o *GetTemperatureDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
