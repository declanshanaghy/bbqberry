package temperatures

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/declanshanaghy/bbqberry/models"
)

// GetTemperaturesReader is a Reader for the GetTemperatures structure.
type GetTemperaturesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTemperaturesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTemperaturesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetTemperaturesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTemperaturesOK creates a GetTemperaturesOK with default headers values
func NewGetTemperaturesOK() *GetTemperaturesOK {
	return &GetTemperaturesOK{}
}

/*GetTemperaturesOK handles this case with default header values.

Temperature was read successfully
*/
type GetTemperaturesOK struct {
	Payload models.TemperatureReadings
}

func (o *GetTemperaturesOK) Error() string {
	return fmt.Sprintf("[GET /temperatures][%d] getTemperaturesOK  %+v", 200, o.Payload)
}

func (o *GetTemperaturesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTemperaturesDefault creates a GetTemperaturesDefault with default headers values
func NewGetTemperaturesDefault(code int) *GetTemperaturesDefault {
	return &GetTemperaturesDefault{
		_statusCode: code,
	}
}

/*GetTemperaturesDefault handles this case with default header values.

Unexpected error
*/
type GetTemperaturesDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get temperatures default response
func (o *GetTemperaturesDefault) Code() int {
	return o._statusCode
}

func (o *GetTemperaturesDefault) Error() string {
	return fmt.Sprintf("[GET /temperatures][%d] getTemperatures default  %+v", o._statusCode, o.Payload)
}

func (o *GetTemperaturesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
