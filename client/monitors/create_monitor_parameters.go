package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/declanshanaghy/bbqberry/models"
)

// NewCreateMonitorParams creates a new CreateMonitorParams object
// with the default values initialized.
func NewCreateMonitorParams() *CreateMonitorParams {
	var ()
	return &CreateMonitorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateMonitorParamsWithTimeout creates a new CreateMonitorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateMonitorParamsWithTimeout(timeout time.Duration) *CreateMonitorParams {
	var ()
	return &CreateMonitorParams{

		timeout: timeout,
	}
}

// NewCreateMonitorParamsWithContext creates a new CreateMonitorParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateMonitorParamsWithContext(ctx context.Context) *CreateMonitorParams {
	var ()
	return &CreateMonitorParams{

		Context: ctx,
	}
}

/*CreateMonitorParams contains all the parameters to send to the API endpoint
for the create monitor operation typically these are written to a http.Request
*/
type CreateMonitorParams struct {

	/*Monitor*/
	Monitor *models.TemperatureMonitor

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create monitor params
func (o *CreateMonitorParams) WithTimeout(timeout time.Duration) *CreateMonitorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create monitor params
func (o *CreateMonitorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create monitor params
func (o *CreateMonitorParams) WithContext(ctx context.Context) *CreateMonitorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create monitor params
func (o *CreateMonitorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithMonitor adds the monitor to the create monitor params
func (o *CreateMonitorParams) WithMonitor(monitor *models.TemperatureMonitor) *CreateMonitorParams {
	o.SetMonitor(monitor)
	return o
}

// SetMonitor adds the monitor to the create monitor params
func (o *CreateMonitorParams) SetMonitor(monitor *models.TemperatureMonitor) {
	o.Monitor = monitor
}

// WriteToRequest writes these params to a swagger request
func (o *CreateMonitorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Monitor == nil {
		o.Monitor = new(models.TemperatureMonitor)
	}

	if err := r.SetBodyParam(o.Monitor); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
