package lights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEnableShifterParams creates a new EnableShifterParams object
// with the default values initialized.
func NewEnableShifterParams() *EnableShifterParams {
	var ()
	return &EnableShifterParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEnableShifterParamsWithTimeout creates a new EnableShifterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEnableShifterParamsWithTimeout(timeout time.Duration) *EnableShifterParams {
	var ()
	return &EnableShifterParams{

		timeout: timeout,
	}
}

// NewEnableShifterParamsWithContext creates a new EnableShifterParams object
// with the default values initialized, and the ability to set a context for a request
func NewEnableShifterParamsWithContext(ctx context.Context) *EnableShifterParams {
	var ()
	return &EnableShifterParams{

		Context: ctx,
	}
}

// NewEnableShifterParamsWithHTTPClient creates a new EnableShifterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEnableShifterParamsWithHTTPClient(client *http.Client) *EnableShifterParams {
	var ()
	return &EnableShifterParams{
		HTTPClient: client,
	}
}

/*EnableShifterParams contains all the parameters to send to the API endpoint
for the enable shifter operation typically these are written to a http.Request
*/
type EnableShifterParams struct {

	/*Period
	  The time period between updates

	*/
	Period int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the enable shifter params
func (o *EnableShifterParams) WithTimeout(timeout time.Duration) *EnableShifterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enable shifter params
func (o *EnableShifterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enable shifter params
func (o *EnableShifterParams) WithContext(ctx context.Context) *EnableShifterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enable shifter params
func (o *EnableShifterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enable shifter params
func (o *EnableShifterParams) WithHTTPClient(client *http.Client) *EnableShifterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enable shifter params
func (o *EnableShifterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPeriod adds the period to the enable shifter params
func (o *EnableShifterParams) WithPeriod(period int64) *EnableShifterParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the enable shifter params
func (o *EnableShifterParams) SetPeriod(period int64) {
	o.Period = period
}

// WriteToRequest writes these params to a swagger request
func (o *EnableShifterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param period
	qrPeriod := o.Period
	qPeriod := swag.FormatInt64(qrPeriod)
	if qPeriod != "" {
		if err := r.SetQueryParam("period", qPeriod); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
