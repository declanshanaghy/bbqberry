package sensors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTemperatureParams creates a new GetTemperatureParams object
// with the default values initialized.
func NewGetTemperatureParams() *GetTemperatureParams {
	var (
		probeDefault = int32(0)
	)
	return &GetTemperatureParams{
		Probe: probeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTemperatureParamsWithTimeout creates a new GetTemperatureParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTemperatureParamsWithTimeout(timeout time.Duration) *GetTemperatureParams {
	var (
		probeDefault = int32(0)
	)
	return &GetTemperatureParams{
		Probe: probeDefault,

		timeout: timeout,
	}
}

// NewGetTemperatureParamsWithContext creates a new GetTemperatureParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTemperatureParamsWithContext(ctx context.Context) *GetTemperatureParams {
	var (
		probeDefault = int32(0)
	)
	return &GetTemperatureParams{
		Probe: probeDefault,

		Context: ctx,
	}
}

/*GetTemperatureParams contains all the parameters to send to the API endpoint
for the get temperature operation typically these are written to a http.Request
*/
type GetTemperatureParams struct {

	/*Probe
	  The termerature probe number to query

	*/
	Probe int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get temperature params
func (o *GetTemperatureParams) WithTimeout(timeout time.Duration) *GetTemperatureParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get temperature params
func (o *GetTemperatureParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get temperature params
func (o *GetTemperatureParams) WithContext(ctx context.Context) *GetTemperatureParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get temperature params
func (o *GetTemperatureParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithProbe adds the probe to the get temperature params
func (o *GetTemperatureParams) WithProbe(probe int32) *GetTemperatureParams {
	o.SetProbe(probe)
	return o
}

// SetProbe adds the probe to the get temperature params
func (o *GetTemperatureParams) SetProbe(probe int32) {
	o.Probe = probe
}

// WriteToRequest writes these params to a swagger request
func (o *GetTemperatureParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param probe
	if err := r.SetPathParam("probe", swag.FormatInt32(o.Probe)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
