package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateAlertParams creates a new UpdateAlertParams object
// with the default values initialized.
func NewUpdateAlertParams() *UpdateAlertParams {
	var ()
	return &UpdateAlertParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAlertParamsWithTimeout creates a new UpdateAlertParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAlertParamsWithTimeout(timeout time.Duration) *UpdateAlertParams {
	var ()
	return &UpdateAlertParams{

		timeout: timeout,
	}
}

// NewUpdateAlertParamsWithContext creates a new UpdateAlertParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAlertParamsWithContext(ctx context.Context) *UpdateAlertParams {
	var ()
	return &UpdateAlertParams{

		Context: ctx,
	}
}

// NewUpdateAlertParamsWithHTTPClient creates a new UpdateAlertParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAlertParamsWithHTTPClient(client *http.Client) *UpdateAlertParams {
	var ()
	return &UpdateAlertParams{
		HTTPClient: client,
	}
}

/*UpdateAlertParams contains all the parameters to send to the API endpoint
for the update alert operation typically these are written to a http.Request
*/
type UpdateAlertParams struct {

	/*Probe*/
	Probe int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update alert params
func (o *UpdateAlertParams) WithTimeout(timeout time.Duration) *UpdateAlertParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update alert params
func (o *UpdateAlertParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update alert params
func (o *UpdateAlertParams) WithContext(ctx context.Context) *UpdateAlertParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update alert params
func (o *UpdateAlertParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update alert params
func (o *UpdateAlertParams) WithHTTPClient(client *http.Client) *UpdateAlertParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update alert params
func (o *UpdateAlertParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProbe adds the probe to the update alert params
func (o *UpdateAlertParams) WithProbe(probe int64) *UpdateAlertParams {
	o.SetProbe(probe)
	return o
}

// SetProbe adds the probe to the update alert params
func (o *UpdateAlertParams) SetProbe(probe int64) {
	o.Probe = probe
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAlertParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param probe
	qrProbe := o.Probe
	qProbe := swag.FormatInt64(qrProbe)
	if qProbe != "" {
		if err := r.SetQueryParam("probe", qProbe); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
