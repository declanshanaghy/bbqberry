package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"os"
	"strings"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/declanshanaghy/bbqberry/client/config"
	"github.com/declanshanaghy/bbqberry/client/health"
	"github.com/declanshanaghy/bbqberry/client/temperature"
)

// Default bbqberry HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new bbqberry HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Bbqberry {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new bbqberry HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Bbqberry {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new bbqberry client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Bbqberry {
	cli := new(Bbqberry)
	cli.Transport = transport

	cli.Config = config.New(transport, formats)

	cli.Health = health.New(transport, formats)

	cli.Temperature = temperature.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	var scheme []string
	var host string

	envScheme := os.Getenv(strings.Replace(strings.ToUpper(DefaultSchemes[0]), "-", "_", -1) + "_SCHEME")
	if len(envScheme) == 0 {
		scheme = DefaultSchemes
	} else {
		scheme = []string{envScheme}
	}

	envHost := os.Getenv(strings.Replace(strings.ToUpper(DefaultHost), "-", "_", -1) + "_HOST")
	if len(envHost) == 0 {
		host = DefaultHost
	} else {
		host = envHost
	}

	return &TransportConfig{
		Host:     host,
		BasePath: DefaultBasePath,
		Schemes:  scheme,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Bbqberry is a client for bbqberry
type Bbqberry struct {
	Config *config.Client

	Health *health.Client

	Temperature *temperature.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Bbqberry) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Config.SetTransport(transport)

	c.Health.SetTransport(transport)

	c.Temperature.SetTransport(transport)

}
