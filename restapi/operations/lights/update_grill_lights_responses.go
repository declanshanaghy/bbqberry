package lights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/declanshanaghy/bbqberry/models"
)

// UpdateGrillLightsOKCode is the HTTP code returned for type UpdateGrillLightsOK
const UpdateGrillLightsOKCode int = 200

/*UpdateGrillLightsOK The lights were updated successfully

swagger:response updateGrillLightsOK
*/
type UpdateGrillLightsOK struct {
}

// NewUpdateGrillLightsOK creates UpdateGrillLightsOK with default headers values
func NewUpdateGrillLightsOK() *UpdateGrillLightsOK {
	return &UpdateGrillLightsOK{}
}

// WriteResponse to the client
func (o *UpdateGrillLightsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*UpdateGrillLightsDefault Unexpected error

swagger:response updateGrillLightsDefault
*/
type UpdateGrillLightsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateGrillLightsDefault creates UpdateGrillLightsDefault with default headers values
func NewUpdateGrillLightsDefault(code int) *UpdateGrillLightsDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateGrillLightsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update grill lights default response
func (o *UpdateGrillLightsDefault) WithStatusCode(code int) *UpdateGrillLightsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update grill lights default response
func (o *UpdateGrillLightsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update grill lights default response
func (o *UpdateGrillLightsDefault) WithPayload(payload *models.Error) *UpdateGrillLightsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update grill lights default response
func (o *UpdateGrillLightsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateGrillLightsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
