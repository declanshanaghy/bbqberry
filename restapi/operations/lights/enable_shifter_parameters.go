package lights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEnableShifterParams creates a new EnableShifterParams object
// with the default values initialized.
func NewEnableShifterParams() EnableShifterParams {
	var ()
	return EnableShifterParams{}
}

// EnableShifterParams contains all the bound params for the enable shifter operation
// typically these are obtained from a http.Request
//
// swagger:parameters enableShifter
type EnableShifterParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The time period between updates in milliseconds
	  Required: true
	  Maximum: 60000
	  Minimum: 0
	  In: query
	*/
	Period int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *EnableShifterParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPeriod, qhkPeriod, _ := qs.GetOK("period")
	if err := o.bindPeriod(qPeriod, qhkPeriod, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EnableShifterParams) bindPeriod(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("period", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("period", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("period", "query", "int64", raw)
	}
	o.Period = value

	if err := o.validatePeriod(formats); err != nil {
		return err
	}

	return nil
}

func (o *EnableShifterParams) validatePeriod(formats strfmt.Registry) error {

	if err := validate.MinimumInt("period", "query", int64(o.Period), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("period", "query", int64(o.Period), 60000, false); err != nil {
		return err
	}

	return nil
}
