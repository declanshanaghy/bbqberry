package lights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateGrillLightsHandlerFunc turns a function with the right signature into a update grill lights handler
type UpdateGrillLightsHandlerFunc func(UpdateGrillLightsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateGrillLightsHandlerFunc) Handle(params UpdateGrillLightsParams) middleware.Responder {
	return fn(params)
}

// UpdateGrillLightsHandler interface for that can handle valid update grill lights params
type UpdateGrillLightsHandler interface {
	Handle(UpdateGrillLightsParams) middleware.Responder
}

// NewUpdateGrillLights creates a new http.Handler for the update grill lights operation
func NewUpdateGrillLights(ctx *middleware.Context, handler UpdateGrillLightsHandler) *UpdateGrillLights {
	return &UpdateGrillLights{Context: ctx, Handler: handler}
}

/*UpdateGrillLights swagger:route PUT /lights/grill Lights updateGrillLights

Enable a light show on the grill lights

*/
type UpdateGrillLights struct {
	Context *middleware.Context
	Handler UpdateGrillLightsHandler
}

func (o *UpdateGrillLights) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUpdateGrillLightsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
