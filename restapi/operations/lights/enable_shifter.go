package lights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// EnableShifterHandlerFunc turns a function with the right signature into a enable shifter handler
type EnableShifterHandlerFunc func(EnableShifterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EnableShifterHandlerFunc) Handle(params EnableShifterParams) middleware.Responder {
	return fn(params)
}

// EnableShifterHandler interface for that can handle valid enable shifter params
type EnableShifterHandler interface {
	Handle(EnableShifterParams) middleware.Responder
}

// NewEnableShifter creates a new http.Handler for the enable shifter operation
func NewEnableShifter(ctx *middleware.Context, handler EnableShifterHandler) *EnableShifter {
	return &EnableShifter{Context: ctx, Handler: handler}
}

/*EnableShifter swagger:route PUT /lights/shifter Lights enableShifter

Enable the simple shifter light show

*/
type EnableShifter struct {
	Context *middleware.Context
	Handler EnableShifterHandler
}

func (o *EnableShifter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewEnableShifterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
