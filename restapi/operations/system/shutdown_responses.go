package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/declanshanaghy/bbqberry/models"
)

// ShutdownOKCode is the HTTP code returned for type ShutdownOK
const ShutdownOKCode int = 200

/*ShutdownOK Shutdown executed successfully

swagger:response shutdownOK
*/
type ShutdownOK struct {
}

// NewShutdownOK creates ShutdownOK with default headers values
func NewShutdownOK() *ShutdownOK {
	return &ShutdownOK{}
}

// WriteResponse to the client
func (o *ShutdownOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*ShutdownDefault Unexpected error

swagger:response shutdownDefault
*/
type ShutdownDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewShutdownDefault creates ShutdownDefault with default headers values
func NewShutdownDefault(code int) *ShutdownDefault {
	if code <= 0 {
		code = 500
	}

	return &ShutdownDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the shutdown default response
func (o *ShutdownDefault) WithStatusCode(code int) *ShutdownDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the shutdown default response
func (o *ShutdownDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the shutdown default response
func (o *ShutdownDefault) WithPayload(payload *models.Error) *ShutdownDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the shutdown default response
func (o *ShutdownDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShutdownDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
