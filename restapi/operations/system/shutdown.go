package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ShutdownHandlerFunc turns a function with the right signature into a shutdown handler
type ShutdownHandlerFunc func(ShutdownParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShutdownHandlerFunc) Handle(params ShutdownParams) middleware.Responder {
	return fn(params)
}

// ShutdownHandler interface for that can handle valid shutdown params
type ShutdownHandler interface {
	Handle(ShutdownParams) middleware.Responder
}

// NewShutdown creates a new http.Handler for the shutdown operation
func NewShutdown(ctx *middleware.Context, handler ShutdownHandler) *Shutdown {
	return &Shutdown{Context: ctx, Handler: handler}
}

/*Shutdown swagger:route PUT /system/shutdown System shutdown

Shutdown the Operating System

*/
type Shutdown struct {
	Context *middleware.Context
	Handler ShutdownHandler
}

func (o *Shutdown) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewShutdownParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
