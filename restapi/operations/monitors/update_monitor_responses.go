package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/declanshanaghy/bbqberry/models"
)

// UpdateMonitorOKCode is the HTTP code returned for type UpdateMonitorOK
const UpdateMonitorOKCode int = 200

/*UpdateMonitorOK The monitor was created successfully

swagger:response updateMonitorOK
*/
type UpdateMonitorOK struct {
}

// NewUpdateMonitorOK creates UpdateMonitorOK with default headers values
func NewUpdateMonitorOK() *UpdateMonitorOK {
	return &UpdateMonitorOK{}
}

// WriteResponse to the client
func (o *UpdateMonitorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*UpdateMonitorDefault Unexpected error

swagger:response updateMonitorDefault
*/
type UpdateMonitorDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateMonitorDefault creates UpdateMonitorDefault with default headers values
func NewUpdateMonitorDefault(code int) *UpdateMonitorDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateMonitorDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update monitor default response
func (o *UpdateMonitorDefault) WithStatusCode(code int) *UpdateMonitorDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update monitor default response
func (o *UpdateMonitorDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update monitor default response
func (o *UpdateMonitorDefault) WithPayload(payload *models.Error) *UpdateMonitorDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update monitor default response
func (o *UpdateMonitorDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMonitorDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
