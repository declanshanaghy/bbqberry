package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateMonitorHandlerFunc turns a function with the right signature into a create monitor handler
type CreateMonitorHandlerFunc func(CreateMonitorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateMonitorHandlerFunc) Handle(params CreateMonitorParams) middleware.Responder {
	return fn(params)
}

// CreateMonitorHandler interface for that can handle valid create monitor params
type CreateMonitorHandler interface {
	Handle(CreateMonitorParams) middleware.Responder
}

// NewCreateMonitor creates a new http.Handler for the create monitor operation
func NewCreateMonitor(ctx *middleware.Context, handler CreateMonitorHandler) *CreateMonitor {
	return &CreateMonitor{Context: ctx, Handler: handler}
}

/*CreateMonitor swagger:route POST /monitors Monitors createMonitor

Get monitor settings for the requested probe

*/
type CreateMonitor struct {
	Context *middleware.Context
	Handler CreateMonitorHandler
}

func (o *CreateMonitor) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateMonitorParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
