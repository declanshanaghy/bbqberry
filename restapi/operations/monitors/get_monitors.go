package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMonitorsHandlerFunc turns a function with the right signature into a get monitors handler
type GetMonitorsHandlerFunc func(GetMonitorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMonitorsHandlerFunc) Handle(params GetMonitorsParams) middleware.Responder {
	return fn(params)
}

// GetMonitorsHandler interface for that can handle valid get monitors params
type GetMonitorsHandler interface {
	Handle(GetMonitorsParams) middleware.Responder
}

// NewGetMonitors creates a new http.Handler for the get monitors operation
func NewGetMonitors(ctx *middleware.Context, handler GetMonitorsHandler) *GetMonitors {
	return &GetMonitors{Context: ctx, Handler: handler}
}

/*GetMonitors swagger:route GET /monitors Monitors getMonitors

Get monitors for the requested probe

*/
type GetMonitors struct {
	Context *middleware.Context
	Handler GetMonitorsHandler
}

func (o *GetMonitors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetMonitorsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
