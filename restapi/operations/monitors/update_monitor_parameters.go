package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateMonitorParams creates a new UpdateMonitorParams object
// with the default values initialized.
func NewUpdateMonitorParams() UpdateMonitorParams {
	var ()
	return UpdateMonitorParams{}
}

// UpdateMonitorParams contains all the bound params for the update monitor operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateMonitor
type UpdateMonitorParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The maximium temperature, above which an alert will be generated
	  Required: true
	  In: query
	*/
	Max int32
	/*The minimum temperature, below which an alert will be generated
	  Required: true
	  In: query
	*/
	Min int32
	/*
	  Required: true
	  Maximum: 3
	  Minimum: 0
	  In: query
	*/
	Probe int32
	/*The temperature scale
	  Required: true
	  In: query
	*/
	Scale string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UpdateMonitorParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qMax, qhkMax, _ := qs.GetOK("max")
	if err := o.bindMax(qMax, qhkMax, route.Formats); err != nil {
		res = append(res, err)
	}

	qMin, qhkMin, _ := qs.GetOK("min")
	if err := o.bindMin(qMin, qhkMin, route.Formats); err != nil {
		res = append(res, err)
	}

	qProbe, qhkProbe, _ := qs.GetOK("probe")
	if err := o.bindProbe(qProbe, qhkProbe, route.Formats); err != nil {
		res = append(res, err)
	}

	qScale, qhkScale, _ := qs.GetOK("scale")
	if err := o.bindScale(qScale, qhkScale, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateMonitorParams) bindMax(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("max", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("max", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("max", "query", "int32", raw)
	}
	o.Max = value

	return nil
}

func (o *UpdateMonitorParams) bindMin(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("min", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("min", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("min", "query", "int32", raw)
	}
	o.Min = value

	return nil
}

func (o *UpdateMonitorParams) bindProbe(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("probe", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("probe", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("probe", "query", "int32", raw)
	}
	o.Probe = value

	if err := o.validateProbe(formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateMonitorParams) validateProbe(formats strfmt.Registry) error {

	if err := validate.MinimumInt("probe", "query", int64(o.Probe), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("probe", "query", int64(o.Probe), 3, false); err != nil {
		return err
	}

	return nil
}

func (o *UpdateMonitorParams) bindScale(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("scale", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("scale", "query", raw); err != nil {
		return err
	}

	o.Scale = raw

	if err := o.validateScale(formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateMonitorParams) validateScale(formats strfmt.Registry) error {

	if err := validate.Enum("scale", "query", o.Scale, []interface{}{"celsius"}); err != nil {
		return err
	}

	return nil
}
